Servizio di backend per l'applicazione Birretta.

===========
TODO List:
===========

Segue una lista di punti che possono essere migliorati ed implementati in modo più elegante ed organizzato architetturalmente in future versioni dell'applicativo.

- Inserire OAuth come meccanismo di autenticazione
- Utilizzare Spring Data per MongoDB per ODM (object-document-mapping) anziché il driver fornito direttamente (il codice è disaccoppiato per permettere questa integrazione in futuro)
- Utilizzati anche gli oggetti di modello come DTO volutamente, eliminati campi non necessari con annotazioni Jackson
- Si può rendere la gestione degli errori a prova di bomba con dei try/catch delle DaoException nelle operazioni dei dao che per ora sono stati tralasciati
- I campi unique (tipo i codici, nomi birre/locali) potrebbero andare tutti in uppercase
- Occorre decidere come trattare le immagini ed il trasferimento delle stesse: base64? altro encoding? Per ora si passa un bytearray diretto ma sicuramente non può essere la soluzione finale
- Si dovranno esplicitare più codici di errore dettagliati, anziché i soli attualmente presenti (troppo generici)
-
- generazione notification(inserimento birra, drinks..) e activity(inserimento birra,drinks..) lato server
- sistemare getAllMyFriends
- badges, likes..
- gestione relationi friends
- listFriendActivity
=====================
MONGODB
=====================

INSTALLAZIONE:
http://docs.mongodb.org/manual/tutorial/install-mongodb-on-redhat-centos-or-fedora-linux/

START-UP
lanciare macchina centos,
verificare che mongod stia eseguendo:service mongod status (restart se necessario)
lanciare jboss: cd /opt/jboss../bin/standalone.bat -b 0.0.0.0
prendere nota indirizzo ip macchina centos e impostarlo su pom birrettaservice
per deploy e copiare war maven in /opt/jboss../standalone/deployments: ex:
scp /gitHub/BirrettaService/target/birrettaservice.war root@192.168.1.9:/opt/jboss-as-7.1.1.Final/standalone/deployments/birrettaservice.war


CONFIGURAZIONE INDEX MONGODB(da fare ogni volta..):
accedere a shell mongoDB(comando #mongo)
use brrtt;
db.locations.ensureIndex( { pos : "2d" } );


TEST COMANDI MONGODB:
http://www.mongodb.org/display/DOCS/Schema+Design
http://www.mongodb.org/display/DOCS/Geospatial+Indexing/
http://www.mongodb.org/display/DOCS/Advanced+Queries

COMANDI MONGO imoprt-export:
mongoexport -d brrtt -c nomecollezione -o nomefile.json
mongoimport -d brrtt -c nomecollezione --file nomefile.json

-- varie
show dbs
show collections

-- indice unique
db.users.ensureIndex({nickname:1},{unique:true});
for (i = 0; i < 10; i++) { db.users.save( {nickname: 'user_' + i, first_name: 'First_' + i, last_name: 'Last_' + i, age: 25} ); };
db.users.find();
for (i=0; i<5;i++) { db.pubs.save({ nome:'Locale_'+i, indirizzo:'via Birrettina n. '+i, loc: [ 0.0+(i+1)*10, 0.0+(i+1)*10] }); };
db.pubs.find();

-- query di raggio long(-180,180), lat(-90,90)
db.pubs.ensureIndex( { loc : "2d" } );
db.pubs.find( { loc: { $near: [30,30], $maxDistance : 15 } } );

-- relazioni
var mypub = db.pubs.find({nome: "Locale_2"}).limit(1).next();
var myuser = db.users.find({nickname: "user_5"}).next();
db.drinks.save( { id_user: myuser._id, id_pub: mypub._id, desc: "Bella Bevuta!" } );
db.drinks.find( {id_user: myuser._id } );
// db.users.ensureIndex => sugli id_pub e id_user
